{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","Fragment","style","color","Heading","for","class","value","onChange","event","console","log","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handlelowClick","toLowerCase","handleExtraSpaces","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.00600a84.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                About\r\n              </Link>\r\n            </li> */}\r\n            <li className=\"nav-item dropdown\">\r\n              <a\r\n                className=\"nav-link dropdown-toggle\"\r\n                href=\"/\"\r\n                role=\"button\"\r\n                data-bs-toggle=\"dropdown\"\r\n                aria-expanded=\"false\"\r\n              >\r\n                Select Your Language\r\n              </a>\r\n              <ul className=\"dropdown-menu\">\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    English\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    Spanish\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <hr className=\"dropdown-divider\" />\r\n                </li>\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    French\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <a className=\"nav-link disabled\" aria-disabled=\"true\">Disabled</a> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-warning\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n        </div>  \r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes= {\r\n    title: PropTypes.string,\r\n}\r\n \r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    console.log(\"Upper Case was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"converted to uppercase\", \"success\")\r\n  };\r\n  const handlelowClick = () => {\r\n    console.log(\"lower Case was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"converted to lowercase\", \"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    console.log(\"on change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // const handlecopy = () => {\r\n  //   var text = document.getElementById(\"myBox\");\r\n  //   text.select(\"\");\r\n  //   navigator.clipboard.writeText(text.value);\r\n  // }\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.Heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <label for=\"MyBox\" class=\"form-label\">\r\n            Write in the Below Box:\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style= {{backgroundColor: props.mode==='dark'?'grey':'white' , color:props.mode==='dark'?'white':'black' }}\r\n            id=\"MyBox\"\r\n            rows=\"10\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-danger mx-2 my-2\" onClick={handleUpClick}>\r\n          Convert to UPPER CASE\r\n        </button>\r\n        <button className=\"btn btn-danger mx-2 my-2\" onClick={handlelowClick}>\r\n          CONVERT TO lower case\r\n        </button>\r\n\r\n\r\n        {/* <button className=\"btn btn-danger mx-2 my-2\" onClick={handlecopy}>\r\n          copy text\r\n        </button> */}\r\n        <button className=\"btn btn-danger my-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Space\r\n        </button>\r\n\r\n\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>\r\n          Your Text Summary is Here\r\n        </h1>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"enter text to preview it\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\n// import About from \"./components/about\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, {useState} from 'react';\nimport Alert from \"./components/Alert\";\n\n// import { BrowserRouter , Route, Routes } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='black';\n      showAlert(\"dark mode has been enabled\", \"success\");\n      document.title = 'Textutils - dark Mode';\n    //   setInterval(() => {\n    //     document.title= 'Made By Rajat';\n    //   }, 2000);\n    //   setInterval(() => {\n    //     document.title= 'Teach By Harry';\n    //   }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light mode has been enabled\", \"success\");\n      document.title = 'Textutils - Light Mode';\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"Text Analyzer\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container\">\n      <TextForm showAlert={showAlert} Heading=\"Enter The Text To Analyze\" mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n/* <>\n    <BrowserRouter>\n      <Navbar title=\"Text Analyzer\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container\">\n      \n        <Routes>\n        <Route path=\"/about\" element={<About />} />\n        </Routes>\n        <Routes>\n        <Route path=\"/\" element={<TextForm showAlert={showAlert} Heading=\"Enter The Text To Analyze\" mode={mode} />} />\n        </Routes>\n      \n      </div>\n      </BrowserRouter>\n</> */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}